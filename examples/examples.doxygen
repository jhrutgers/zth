// vim:filetype=cpp

/*!
\example 1_helloworld.cpp
\brief Basic Zth usage.
This program will print:
\verbatim
Hello
World!!1
\endverbatim
*/

/*!
\example 2_fibers.cpp
\brief Fiber creation.
This program will print:
\verbatim
fiber_vv()
fddd is not valid yet
fiber_ddd(3, 4) = 7
fddd = 7
fiber_ddd(1, 2) = 3
fiber_vii(3, 14)
fiber_vi(42)
fiber_vv()
\endverbatim
Note that the order of the last four lines is not deterministic.
*/

/*!
\example 3_coop.cpp
\brief Example how to yield properly.
This program will print something like this (depending on the speed of your CPU):
\verbatim
Example 1: nice vs nicer
Be nicer 0
Be nice 0
Be nice 1
Be nice 2
Be nice 3
Be nicer 1
Be nice 4
Be nice 5
Be nice 6
Be nicer 2
Be nice 7
Be nice 8
Be nice 9
nice_fiber() done
Be nicer 3
Be nicer 4
Be nicer 5
Be nicer 6
Be nicer 7
Be nicer 8
Be nicer 9
nicer_fiber() done

Example 2: server-client
Requesting 0
Requesting 1
Requesting 2
Serving 0
Serving 1
Serving 2
Requesting 3
Requesting 4
Requesting 5
Serving 3
Serving 4
Serving 5
Requesting 6
Requesting 7
Requesting 8
Serving 6
Serving 7
Serving 8
Requesting 9
Serving 9
\endverbatim
*/

/*!
\example 4_sync.cpp
\brief Synchronization primitives example.
This program will print something like this:
\verbatim
Other fiber
fiber 3 outside of critical section
 { fiber 3 at start of critical section
fiber 2 outside of critical section
fiber 1 outside of critical section
Other fiber
 } fiber 3 at end of critical section
 { fiber 2 at start of critical section
Other fiber
fiber 3 outside of critical section
 } fiber 2 at end of critical section
 { fiber 1 at start of critical section
Other fiber
fiber 2 outside of critical section
 } fiber 1 at end of critical section
 { fiber 3 at start of critical section
Other fiber
fiber 1 outside of critical section
 } fiber 3 at end of critical section
 { fiber 2 at start of critical section
Other fiber
fiber 3 outside of critical section
 } fiber 2 at end of critical section
 { fiber 1 at start of critical section
Other fiber
fiber 2 outside of critical section
 } fiber 1 at end of critical section
 { fiber 3 at start of critical section
Other fiber
fiber 1 outside of critical section
 } fiber 3 at end of critical section
 { fiber 2 at start of critical section
Other fiber
 } fiber 2 at end of critical section
 { fiber 1 at start of critical section
Other fiber
 } fiber 1 at end of critical section
Other fiber
\endverbatim
*/

/*!
\example 5_perf.cpp
\brief perf example.
*/

/*!
\example 9_c_api.c
\brief C-API example.
*/

/*!
\example socks.cpp
\brief More complex fiber and synchronization example.
*/

/*!
\example zmq.cpp
\brief 0MQ integration
*/

/*!
\example daemon_pattern.cpp
\brief Pattern how to use and trigger a background daemon fiber.
*/

/*!
\example fsm.cpp
\brief Finite-state machine example
*/
