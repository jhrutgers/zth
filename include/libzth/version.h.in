#ifndef ZTH_VERSION_H
#define ZTH_VERSION_H
/*
 * Zth (libzth), a cooperative userspace multitasking library.
 * Copyright (C) 2019-2021  Jochem Rutgers
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include <libzth/util.h>

// clang-format off
#define ZTH_VERSION_MAJOR   @ZTH_VERSION_MAJOR@
#define ZTH_VERSION_MINOR   @ZTH_VERSION_MINOR@
#define ZTH_VERSION_PATCH   @ZTH_VERSION_PATCH@
#define ZTH_VERSION_SUFFIX "@ZTH_VERSION_SUFFIX@"
// clang-format on

/*!
 * \def ZTH_VERSION_MAJOR
 * \brief Zth major version as int
 * \ingroup zth_api_cpp_util
 */
/*!
 * \def ZTH_VERSION_MINOR
 * \brief Zth minor version as int
 * \ingroup zth_api_cpp_util
 */
/*!
 * \def ZTH_VERSION_PATCH
 * \brief Zth patch version as int
 * \ingroup zth_api_cpp_util
 */
/*!
 * \def ZTH_VERSION_SUFFIX
 * \brief Zth version suffix as string literal
 * \ingroup zth_api_cpp_util
 */

/*!
 * \brief Zth version as string literal
 * \ingroup zth_api_cpp_util
 * \hideinitializer
 */
#define ZTH_VERSION                      \
	ZTH_STRINGIFY(ZTH_VERSION_MAJOR) \
	"." ZTH_STRINGIFY(ZTH_VERSION_MINOR) "." ZTH_STRINGIFY(ZTH_VERSION_PATCH) ZTH_VERSION_SUFFIX

/*!
 * \brief Zth version as number.
 *
 * The format is the decimal value \c MMmmpp, where \c MM is the major version, \c mm
 * the minor, and \c pp the patch version.  The suffix is not included.
 *
 * \ingroup zth_api_cpp_util
 * \hideinitializer
 */
#define ZTH_VERSION_NUM (ZTH_VERSION_MAJOR * 10000L + ZTH_VERSION_MINOR * 100L + ZTH_VERSION_PATCH)

#ifdef __cplusplus
namespace zth {
/*!
 * \brief Returns the version of Zth.
 * \ingroup zth_api_cpp_util
 */
ZTH_EXPORT constexpr inline char const* version() noexcept
{
	return ZTH_VERSION;
}
} // namespace zth

/*!
 * \copydoc zth::version()
 * \details This is a C-wrapper for zth::version().
 * \ingroup zth_api_c_util
 */
EXTERN_C ZTH_EXPORT ZTH_INLINE char const* zth_version() noexcept
{
	return zth::version();
}
#else  // !__cplusplus
ZTH_EXPORT char const* zth_version();
#endif // __cplusplus

#endif // ZTH_VERSION_H
